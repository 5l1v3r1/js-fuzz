const JSON2 = function () {
    'use strict';
    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    function f(n) {
        return n < 10 ? (__js_fuzz_.coverage.hash[2738366220]++, '0' + n) : (__js_fuzz_.coverage.hash[4273908027]++, n);
    }
    function this_value() {
        return this.valueOf();
    }
    if (typeof Date.prototype.toJSON !== 'function') {
        __js_fuzz_.coverage.hash[3898928360]++;
        Date.prototype.toJSON = function () {
            return isFinite(this.valueOf()) ? (__js_fuzz_.coverage.hash[2559261518]++, this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z') : (__js_fuzz_.coverage.hash[44248990]++, null);
        };
        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }
    var gap;
    var indent;
    var meta;
    var rep;
    function quote(string) {
        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string) ? (__js_fuzz_.coverage.hash[895566665]++, '"' + string.replace(rx_escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? (__js_fuzz_.coverage.hash[4066184513]++, c) : (__js_fuzz_.coverage.hash[1806463981]++, '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4));
        }) + '"') : (__js_fuzz_.coverage.hash[3441304185]++, '"' + string + '"');
    }
    function str(key, holder) {
        var i;
        var k;
        var v;
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];
        if ((__js_fuzz_.coverage.hash[1278105095]++, (__js_fuzz_.coverage.hash[3821930904]++, value) && (__js_fuzz_.coverage.hash[1595934395]++, typeof value === 'object')) && (__js_fuzz_.coverage.hash[1474996517]++, typeof value.toJSON === 'function')) {
            __js_fuzz_.coverage.hash[1357922824]++;
            value = value.toJSON(key);
        }
        if (typeof rep === 'function') {
            __js_fuzz_.coverage.hash[3227152405]++;
            value = rep.call(holder, key, value);
        }
        switch (typeof value) {
        case 'string':
            __js_fuzz_.coverage.hash[1230373540]++;
            return quote(value);
        case 'number':
            __js_fuzz_.coverage.hash[3448365116]++;
            return isFinite(value) ? (__js_fuzz_.coverage.hash[1533432938]++, String(value)) : (__js_fuzz_.coverage.hash[3654804381]++, 'null');
        case 'boolean':
            __js_fuzz_.coverage.hash[3854834486]++;
        case 'null':
            __js_fuzz_.coverage.hash[90780359]++;
            return String(value);
        case 'object':
            __js_fuzz_.coverage.hash[2459674944]++;
            if (!value) {
                __js_fuzz_.coverage.hash[3269082493]++;
                return 'null';
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                __js_fuzz_.coverage.hash[4153537217]++;
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = (__js_fuzz_.coverage.hash[1969033073]++, str(i, value)) || (__js_fuzz_.coverage.hash[2487027726]++, 'null');
                }
                v = partial.length === 0 ? (__js_fuzz_.coverage.hash[2499520749]++, '[]') : (__js_fuzz_.coverage.hash[3047903615]++, gap ? (__js_fuzz_.coverage.hash[2019945121]++, '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']') : (__js_fuzz_.coverage.hash[3342301869]++, '[' + partial.join(',') + ']'));
                gap = mind;
                return v;
            }
            if ((__js_fuzz_.coverage.hash[3307490204]++, rep) && (__js_fuzz_.coverage.hash[3791378227]++, typeof rep === 'object')) {
                __js_fuzz_.coverage.hash[4234007692]++;
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        __js_fuzz_.coverage.hash[636536630]++;
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            __js_fuzz_.coverage.hash[93738981]++;
                            partial.push(quote(k) + (gap ? (__js_fuzz_.coverage.hash[1842654232]++, ': ') : (__js_fuzz_.coverage.hash[968243656]++, ':')) + v);
                        }
                    }
                }
            } else {
                __js_fuzz_.coverage.hash[2414534340]++;
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        __js_fuzz_.coverage.hash[659409714]++;
                        v = str(k, value);
                        if (v) {
                            __js_fuzz_.coverage.hash[3942752827]++;
                            partial.push(quote(k) + (gap ? (__js_fuzz_.coverage.hash[3849098768]++, ': ') : (__js_fuzz_.coverage.hash[2781344851]++, ':')) + v);
                        }
                    }
                }
            }
            v = partial.length === 0 ? (__js_fuzz_.coverage.hash[935272587]++, '{}') : (__js_fuzz_.coverage.hash[3585905550]++, gap ? (__js_fuzz_.coverage.hash[1793822355]++, '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}') : (__js_fuzz_.coverage.hash[1595738845]++, '{' + partial.join(',') + '}'));
            gap = mind;
            return v;
        }
    }
    const JSON = {};
    if (typeof JSON.stringify !== 'function') {
        __js_fuzz_.coverage.hash[2748906447]++;
        meta = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if (typeof space === 'number') {
                __js_fuzz_.coverage.hash[704365311]++;
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else {
                __js_fuzz_.coverage.hash[1046349797]++;
                if (typeof space === 'string') {
                    __js_fuzz_.coverage.hash[1288345544]++;
                    indent = space;
                }
            }
            rep = replacer;
            if ((__js_fuzz_.coverage.hash[961578865]++, (__js_fuzz_.coverage.hash[2852412675]++, replacer) && (__js_fuzz_.coverage.hash[2452751470]++, typeof replacer !== 'function')) && (__js_fuzz_.coverage.hash[4262135822]++, (__js_fuzz_.coverage.hash[4246658171]++, typeof replacer !== 'object') || (__js_fuzz_.coverage.hash[1319220212]++, typeof replacer.length !== 'number'))) {
                __js_fuzz_.coverage.hash[2621467693]++;
                throw new Error('JSON.stringify');
            }
            return str('', { '': value });
        };
    }
    if (typeof JSON.parse !== 'function') {
        __js_fuzz_.coverage.hash[2130980127]++;
        JSON.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k;
                var v;
                var value = holder[key];
                if ((__js_fuzz_.coverage.hash[1687832855]++, value) && (__js_fuzz_.coverage.hash[3612642538]++, typeof value === 'object')) {
                    __js_fuzz_.coverage.hash[2417573299]++;
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            __js_fuzz_.coverage.hash[99732790]++;
                            v = walk(value, k);
                            if (v !== undefined) {
                                __js_fuzz_.coverage.hash[3089291410]++;
                                value[k] = v;
                            } else {
                                __js_fuzz_.coverage.hash[4249717532]++;
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                __js_fuzz_.coverage.hash[929821404]++;
                text = text.replace(rx_dangerous, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (rx_one.test(text.replace(rx_two, '@').replace(rx_three, ']').replace(rx_four, ''))) {
                __js_fuzz_.coverage.hash[258148855]++;
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? (__js_fuzz_.coverage.hash[1403979226]++, walk({ '': j }, '')) : (__js_fuzz_.coverage.hash[2050152445]++, j);
            }
            throw new SyntaxError('JSON.parse');
        };
    }
    return JSON;
}();
JSON.parse(`{
    "type": "Program",
    "body": [
        {
            "type": "IfStatement",
            "test": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "foo"
                },
                "arguments": []
            },
            "consequent": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "SequenceExpression",
                            "expressions": [
                                {
                                    "type": "Identifier",
                                    "name": "foo"
                                },
                                {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "bar"
                                    },
                                    "arguments": []
                                }
                            ]
                        }
                    }
                ]
            },
            "alternate": null
        },
        {
            "type": "IfStatement",
            "test": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "foo"
                },
                "arguments": []
            },
            "consequent": {
                "type": "ExpressionStatement",
                "expression": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "Identifier",
                        "name": "bar"
                    },
                    "arguments": []
                }
            },
            "alternate": null
        },
        {
            "type": "IfStatement",
            "test": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "foo"
                },
                "arguments": []
            },
            "consequent": {
                "type": "ExpressionStatement",
                "expression": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "Identifier",
                        "name": "bar"
                    },
                    "arguments": []
                }
            },
            "alternate": {
                "type": "ExpressionStatement",
                "expression": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "Identifier",
                        "name": "baz"
                    },
                    "arguments": []
                }
            }
        },
        {
            "type": "IfStatement",
            "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                    "type": "SequenceExpression",
                    "expressions": [
                        {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "whatever"
                            },
                            "arguments": []
                        },
                        {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "foo"
                            },
                            "arguments": []
                        }
                    ]
                },
                "right": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "Identifier",
                        "name": "bin"
                    },
                    "arguments": []
                }
            },
            "consequent": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "bar"
                            },
                            "arguments": []
                        }
                    }
                ]
            },
            "alternate": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "baz"
                            },
                            "arguments": []
                        }
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}`);